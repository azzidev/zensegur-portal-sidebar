var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useTheme } from '../context';
export var Button = function (_a) {
    var children = _a.children, onClick = _a.onClick, _b = _a.type, type = _b === void 0 ? 'primary' : _b, _c = _a.loading, loading = _c === void 0 ? false : _c, _d = _a.htmlType, htmlType = _d === void 0 ? 'button' : _d, style = _a.style;
    var theme = useTheme().theme;
    var baseStyle = __assign({ padding: '12px 24px', borderRadius: '20px', border: 'none', fontFamily: 'Poppins', fontWeight: 700, fontSize: '14px', cursor: loading ? 'not-allowed' : 'pointer', transition: 'all 0.3s ease' }, style);
    var primaryStyle = __assign(__assign({}, baseStyle), { backgroundColor: theme.colors.primary, color: '#FFFFFF' });
    var secondaryStyle = __assign(__assign({}, baseStyle), { backgroundColor: 'transparent', color: theme.colors.primary, border: "1px solid ".concat(theme.colors.primary) });
    return (_jsx("button", __assign({ type: htmlType, style: type === 'primary' ? primaryStyle : secondaryStyle, onClick: onClick, disabled: loading }, { children: loading ? 'Carregando...' : children })));
};
