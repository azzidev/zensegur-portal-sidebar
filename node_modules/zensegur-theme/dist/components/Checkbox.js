var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTheme } from '../context';
export var Checkbox = function (_a) {
    var _b = _a.checked, checked = _b === void 0 ? false : _b, onChange = _a.onChange, children = _a.children, _c = _a.disabled, disabled = _c === void 0 ? false : _c;
    var theme = useTheme().theme;
    return (_jsxs("label", __assign({ style: {
            display: 'flex',
            alignItems: 'center',
            cursor: disabled ? 'not-allowed' : 'pointer',
            opacity: disabled ? 0.6 : 1,
            fontFamily: 'Poppins',
            fontSize: '14px',
            color: theme.colors.text
        } }, { children: [_jsxs("div", __assign({ style: {
                    position: 'relative',
                    width: '18px',
                    height: '18px',
                    marginRight: '8px'
                } }, { children: [_jsx("input", { type: "checkbox", checked: checked, onChange: function (e) { return onChange === null || onChange === void 0 ? void 0 : onChange(e.target.checked); }, disabled: disabled, style: {
                            position: 'absolute',
                            opacity: 0,
                            width: '100%',
                            height: '100%',
                            cursor: disabled ? 'not-allowed' : 'pointer'
                        } }), _jsx("div", __assign({ style: {
                            width: '18px',
                            height: '18px',
                            border: "2px solid ".concat(checked ? theme.colors.primary : theme.colors.border),
                            borderRadius: '4px',
                            backgroundColor: checked ? theme.colors.primary : 'transparent',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            transition: 'all 0.3s ease'
                        } }, { children: checked && (_jsx("span", __assign({ style: {
                                color: 'white',
                                fontSize: '12px',
                                fontWeight: 'bold'
                            } }, { children: "\u2713" }))) }))] })), children] })));
};
