var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTheme } from '../context';
import { Button } from './Button';
export var Modal = function (_a) {
    var visible = _a.visible, title = _a.title, children = _a.children, onOk = _a.onOk, onCancel = _a.onCancel, _b = _a.okText, okText = _b === void 0 ? 'OK' : _b, _c = _a.cancelText, cancelText = _c === void 0 ? 'Cancelar' : _c, _d = _a.width, width = _d === void 0 ? 520 : _d;
    var theme = useTheme().theme;
    if (!visible)
        return null;
    return (_jsx("div", __assign({ style: {
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
        } }, { children: _jsxs("div", __assign({ style: {
                backgroundColor: theme.colors.surface,
                borderRadius: '12px',
                width: "".concat(width, "px"),
                maxWidth: '90vw',
                maxHeight: '90vh',
                overflow: 'hidden',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.2)'
            } }, { children: [title && (_jsx("div", __assign({ style: {
                        padding: '16px 20px',
                        borderBottom: "1px solid ".concat(theme.colors.border),
                        fontWeight: 600,
                        fontSize: '16px',
                        color: theme.colors.text
                    } }, { children: title }))), _jsx("div", __assign({ style: {
                        padding: '20px',
                        color: theme.colors.text
                    } }, { children: children })), _jsxs("div", __assign({ style: {
                        padding: '12px 20px',
                        borderTop: "1px solid ".concat(theme.colors.border),
                        display: 'flex',
                        justifyContent: 'flex-end',
                        gap: '8px'
                    } }, { children: [onCancel && (_jsx(Button, __assign({ type: "secondary", onClick: onCancel }, { children: cancelText }))), onOk && (_jsx(Button, __assign({ type: "primary", onClick: onOk }, { children: okText })))] }))] })) })));
};
