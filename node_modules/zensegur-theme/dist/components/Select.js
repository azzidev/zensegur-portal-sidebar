var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useRef, useEffect } from 'react';
import { useTheme } from '../context';
export var Select = function (_a) {
    var options = _a.options, value = _a.value, onChange = _a.onChange, _b = _a.placeholder, placeholder = _b === void 0 ? 'Selecione...' : _b, style = _a.style;
    var theme = useTheme().theme;
    var _c = useState(false), isOpen = _c[0], setIsOpen = _c[1];
    var selectRef = useRef(null);
    var selectedOption = options.find(function (opt) { return opt.value === value; });
    useEffect(function () {
        var handleClickOutside = function (event) {
            if (selectRef.current && !selectRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return function () { return document.removeEventListener('mousedown', handleClickOutside); };
    }, []);
    return (_jsxs("div", __assign({ ref: selectRef, style: __assign({ position: 'relative' }, style) }, { children: [_jsxs("div", __assign({ onClick: function () { return setIsOpen(!isOpen); }, style: {
                    width: '100%',
                    height: '56px',
                    padding: '16px',
                    borderRadius: '12px',
                    border: "1px solid ".concat(theme.colors.border),
                    backgroundColor: theme.colors.surface,
                    color: theme.colors.text,
                    fontSize: '16px',
                    fontFamily: 'Poppins',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    transition: 'all 0.3s ease'
                } }, { children: [_jsx("span", __assign({ style: {
                            color: selectedOption ? theme.colors.text : theme.colors.textSecondary
                        } }, { children: selectedOption ? selectedOption.label : placeholder })), _jsx("span", __assign({ style: {
                            transform: isOpen ? 'rotate(180deg)' : 'rotate(0deg)',
                            transition: 'transform 0.3s ease'
                        } }, { children: "\u25BC" }))] })), isOpen && (_jsx("div", __assign({ style: {
                    position: 'absolute',
                    top: '100%',
                    left: 0,
                    right: 0,
                    backgroundColor: theme.colors.surface,
                    border: "1px solid ".concat(theme.colors.border),
                    borderRadius: '12px',
                    marginTop: '4px',
                    zIndex: 1000,
                    maxHeight: '200px',
                    overflowY: 'auto',
                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
                } }, { children: options.map(function (option) { return (_jsx("div", __assign({ onClick: function () {
                        onChange === null || onChange === void 0 ? void 0 : onChange(option.value);
                        setIsOpen(false);
                    }, style: {
                        padding: '12px 16px',
                        cursor: 'pointer',
                        color: theme.colors.text,
                        backgroundColor: value === option.value ? theme.colors.primary + '20' : 'transparent',
                        transition: 'background-color 0.2s ease'
                    }, onMouseEnter: function (e) {
                        if (value !== option.value) {
                            e.currentTarget.style.backgroundColor = theme.mode === 'light' ? '#f5f5f5' : '#333';
                        }
                    }, onMouseLeave: function (e) {
                        if (value !== option.value) {
                            e.currentTarget.style.backgroundColor = 'transparent';
                        }
                    } }, { children: option.label }), option.value)); }) })))] })));
};
