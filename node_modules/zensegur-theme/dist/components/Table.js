var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTheme } from '../context';
export var Table = function (_a) {
    var columns = _a.columns, dataSource = _a.dataSource, _b = _a.loading, loading = _b === void 0 ? false : _b, _c = _a.pagination, pagination = _c === void 0 ? true : _c, _d = _a.rowKey, rowKey = _d === void 0 ? 'id' : _d;
    var theme = useTheme().theme;
    var getRowKey = function (record, index) {
        if (typeof rowKey === 'function')
            return rowKey(record);
        return record[rowKey] || index;
    };
    if (loading) {
        return (_jsx("div", __assign({ style: {
                padding: '40px',
                textAlign: 'center',
                color: theme.colors.textSecondary
            } }, { children: "Carregando..." })));
    }
    return (_jsxs("div", __assign({ style: {
            backgroundColor: theme.colors.surface,
            borderRadius: '12px',
            overflow: 'hidden',
            border: "1px solid ".concat(theme.colors.border)
        } }, { children: [_jsxs("table", __assign({ style: {
                    width: '100%',
                    borderCollapse: 'collapse'
                } }, { children: [_jsx("thead", { children: _jsx("tr", __assign({ style: {
                                backgroundColor: theme.mode === 'light' ? '#fafafa' : theme.colors.background
                            } }, { children: columns.map(function (col, index) { return (_jsx("th", __assign({ style: {
                                    padding: '16px',
                                    textAlign: 'left',
                                    fontWeight: 600,
                                    color: theme.colors.text,
                                    borderBottom: "1px solid ".concat(theme.colors.border),
                                    width: col.width
                                } }, { children: col.title }), col.key || col.dataIndex || index)); }) })) }), _jsx("tbody", { children: dataSource.map(function (record, rowIndex) { return (_jsx("tr", __assign({ style: {
                                borderBottom: "1px solid ".concat(theme.colors.border)
                            } }, { children: columns.map(function (col, colIndex) { return (_jsx("td", __assign({ style: {
                                    padding: '16px',
                                    color: theme.colors.text
                                } }, { children: col.render
                                    ? col.render(record[col.dataIndex], record, rowIndex)
                                    : record[col.dataIndex] }), col.key || col.dataIndex || colIndex)); }) }), getRowKey(record, rowIndex))); }) })] })), dataSource.length === 0 && (_jsx("div", __assign({ style: {
                    padding: '40px',
                    textAlign: 'center',
                    color: theme.colors.textSecondary
                } }, { children: "Nenhum dado encontrado" })))] })));
};
