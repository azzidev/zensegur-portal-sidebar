var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { useTheme } from '../context';
export var Tabs = function (_a) {
    var defaultActiveKey = _a.defaultActiveKey, activeKey = _a.activeKey, onChange = _a.onChange, children = _a.children;
    var theme = useTheme().theme;
    var _b = useState(defaultActiveKey || ''), internalActiveKey = _b[0], setInternalActiveKey = _b[1];
    var currentActiveKey = activeKey !== undefined ? activeKey : internalActiveKey;
    var childrenArray = Array.isArray(children) ? children : [children];
    var handleTabClick = function (key) {
        if (activeKey === undefined) {
            setInternalActiveKey(key);
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(key);
    };
    var activePane = childrenArray.find(function (child) { return child.props.tabKey === currentActiveKey; });
    return (_jsxs("div", { children: [_jsx("div", __assign({ style: {
                    borderBottom: "1px solid ".concat(theme.colors.border),
                    marginBottom: '20px'
                } }, { children: _jsx("div", __assign({ style: {
                        display: 'flex',
                        gap: '0'
                    } }, { children: childrenArray.map(function (child) { return (_jsx("button", __assign({ onClick: function () { return handleTabClick(child.props.tabKey); }, style: {
                            padding: '12px 20px',
                            border: 'none',
                            backgroundColor: 'transparent',
                            color: currentActiveKey === child.props.tabKey ? theme.colors.primary : theme.colors.textSecondary,
                            fontFamily: 'Poppins',
                            fontSize: '14px',
                            fontWeight: currentActiveKey === child.props.tabKey ? 600 : 400,
                            cursor: 'pointer',
                            borderBottom: currentActiveKey === child.props.tabKey ? "2px solid ".concat(theme.colors.primary) : '2px solid transparent',
                            transition: 'all 0.3s ease'
                        } }, { children: child.props.tab }), child.props.tabKey)); }) })) })), _jsx("div", { children: activePane === null || activePane === void 0 ? void 0 : activePane.props.children })] }));
};
export var TabPane = function (_a) {
    var children = _a.children;
    return _jsx(_Fragment, { children: children });
};
