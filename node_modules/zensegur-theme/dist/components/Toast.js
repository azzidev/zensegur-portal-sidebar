var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { useTheme } from '../context';
export var Toast = function (_a) {
    var message = _a.message, type = _a.type, _b = _a.duration, duration = _b === void 0 ? 3000 : _b, onClose = _a.onClose;
    var theme = useTheme().theme;
    useEffect(function () {
        var timer = setTimeout(onClose, duration);
        return function () { return clearTimeout(timer); };
    }, [duration, onClose]);
    var getTypeColor = function () {
        switch (type) {
            case 'success': return '#52c41a';
            case 'error': return '#ff4d4f';
            case 'warning': return '#faad14';
            case 'info': return theme.colors.primary;
            default: return theme.colors.primary;
        }
    };
    return (_jsxs("div", __assign({ style: {
            position: 'fixed',
            top: '20px',
            right: '20px',
            backgroundColor: theme.colors.surface,
            color: theme.colors.text,
            padding: '16px 20px',
            borderRadius: '8px',
            borderLeft: "4px solid ".concat(getTypeColor()),
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
            zIndex: 9999,
            maxWidth: '400px',
            fontFamily: 'Poppins',
            fontSize: '14px',
            animation: 'slideIn 0.3s ease-out'
        } }, { children: [message, _jsx("style", { children: "\n        @keyframes slideIn {\n          from { transform: translateX(100%); opacity: 0; }\n          to { transform: translateX(0); opacity: 1; }\n        }\n      " })] })));
};
// Hook para usar toast
var toastId = 0;
var toasts = [];
var listeners = [];
export var message = {
    success: function (msg) { return showToast(msg, 'success'); },
    error: function (msg) { return showToast(msg, 'error'); },
    warning: function (msg) { return showToast(msg, 'warning'); },
    info: function (msg) { return showToast(msg, 'info'); },
};
function showToast(msg, type) {
    var id = ++toastId;
    toasts.push({ id: id, message: msg, type: type });
    notifyListeners();
    setTimeout(function () {
        var index = toasts.findIndex(function (t) { return t.id === id; });
        if (index > -1) {
            toasts.splice(index, 1);
            notifyListeners();
        }
    }, 3000);
}
function notifyListeners() {
    listeners.forEach(function (listener) { return listener(); });
}
export var useToast = function () {
    var _a = useState({}), forceUpdate = _a[1];
    useEffect(function () {
        var listener = function () { return forceUpdate({}); };
        listeners.push(listener);
        return function () {
            var index = listeners.indexOf(listener);
            if (index > -1)
                listeners.splice(index, 1);
        };
    }, []);
    return toasts;
};
