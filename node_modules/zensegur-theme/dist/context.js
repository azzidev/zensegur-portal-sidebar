var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useEffect, useState } from 'react';
import { ConfigProvider, theme } from 'antd';
import { lightTheme, darkTheme, antdThemeConfig } from './config';
var THEME_STORAGE_KEY = 'zensegur-theme';
var ThemeContext = createContext(undefined);
export var useTheme = function () {
    var context = useContext(ThemeContext);
    if (!context) {
        throw new Error('useTheme must be used within ThemeProvider');
    }
    return context;
};
export var ThemeProvider = function (_a) {
    var children = _a.children;
    var _b = useState(function () {
        var saved = localStorage.getItem(THEME_STORAGE_KEY);
        return saved || 'light';
    }), mode = _b[0], setMode = _b[1];
    var currentTheme = mode === 'light' ? lightTheme : darkTheme;
    var toggleTheme = function () {
        setMode(function (prev) { return prev === 'light' ? 'dark' : 'light'; });
    };
    var setTheme = function (newMode) {
        setMode(newMode);
    };
    useEffect(function () {
        localStorage.setItem(THEME_STORAGE_KEY, mode);
        document.documentElement.setAttribute('data-theme', mode);
    }, [mode]);
    var antdConfig = {
        algorithm: mode === 'dark' ? theme.darkAlgorithm : theme.defaultAlgorithm,
        token: antdThemeConfig[mode].token,
    };
    return (_jsx(ThemeContext.Provider, __assign({ value: {
            theme: currentTheme,
            mode: mode,
            toggleTheme: toggleTheme,
            setTheme: setTheme,
        } }, { children: _jsx(ConfigProvider, __assign({ theme: antdConfig }, { children: children })) })));
};
